using BansheeGz.BGDatabase;
using UnityEngine;


/// <summary>
/// 1) Enable assets L2 cache
/// 2) Preload assets and put them into L2 cache
/// 3) If validateLoadedAsset=true, also validate that all set assets is loaded properly (i.e. if some not null path is stored inside database- the asset should be loaded properly)
/// </summary>
public class DbAssetsPreloader : MonoBehaviour
{
    public const string Version = "1.0";
    
    //this parameter ensure, that the asset was indeed loaded if some path is stored inside database
    public bool validateLoadedAsset = true;

    void Awake()
    {
        //prevent gameobject destroying
        DontDestroyOnLoad(gameObject);

        //enable assets cache
        BGAssetsCache.Enabled = true;

        //preload and cache Addressables assets
        BGRepo.I.ForEachMeta(meta =>
        {
            meta.ForEachField(field =>
            {
                //iterate all Addressables asset fields and call getValue once to cache results
                for (var i = 0; i < meta.CountEntities; i++)
                {
                    var asset = field.GetValue(i);
                    if (validateLoadedAsset && asset == null)
                    {
                        var path = ((BGStorable<string>)field).GetStoredValue(i);
                        if (!string.IsNullOrEmpty(path)) print($"Addressables preloader WARNING: Asset can not be loaded for the entity #=[{i}] meta=[{meta.Name}] with invalid path value=[{path}]");
                    }
                }
            }, field => field is BGAssetLoaderA.WithLoaderI);
        });
    }

    private void OnDestroy()
    {
        //clear the cache on destroy
        BGAssetsCache.Enabled = false;
    }
}